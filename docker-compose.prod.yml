services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: the-blog-frontend-prod
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - blog_uploads:/app/public/uploads
    environment:
      - NODE_ENV=production
      - UPLOAD_DIR=/app/public/uploads
      - NEXT_PUBLIC_MEDIA_BASE_URL=/uploads
    depends_on:
      - symfony-backend

  symfony-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: the-blog-backend-prod
    restart: always
    volumes:
      - ./backend:/var/www/symfony
    environment:
      APP_ENV: prod
    depends_on:
      - db

  nginx:
    build:
      context: ./backend
      dockerfile: Dockerfile.nginx
    container_name: the-blog-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - blog_uploads:/var/www/uploads
    depends_on:
      - symfony-backend
      - frontend

  db:
    image: mysql:8.0
    container_name: the-blog-db-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    
  redis:
    image: redis:7-alpine
    container_name: the-blog-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning

volumes:
  mysql_data:
  redis_data:
  blog_uploads:
